% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/Distance.R
\name{mean_neighbor_dist_min}
\alias{get_d2_min}
\alias{mean_neighbor_dist_min}
\title{Mean Neighbor Distances (Minimum)}
\usage{
mean_neighbor_dist_min(graph, short_paths = NULL, as_dist = FALSE)

get_d2_min(graph, short_paths = NULL, as_dist = FALSE)
}
\arguments{
\item{graph}{an igraph object.}

\item{short_paths}{either a \eqn{|V|x|V|} symmetric matrix containing the shortest
path distances between the vertices in \code{graph} or a \code{\link{dist}}
object from the \code{\link{stats}} package. If \code{NULL} (default), the
shortest paths will be calculated. If shortest paths are available, this
functions runs at least 50\% faster. Counterintuitively, this function will
be faster if \code{short_paths} is of class "matrix" instead of class "dist".}

\item{as_dist}{if \code{FALSE} (default), will return a "matrix" object. If
\code{TRUE}, will return a "\code{\link{dist}}" object from \pkg{stats}.}
}
\value{
\code{mean_neighbor_dist_min} returns either a "matrix" or a "dist"
object representing dissimilarities between vertices in a graph.
}
\description{
For each vertex \eqn{v_i} in \code{graph}, this function calculates the average of
the shortest paths from each neighbor of \eqn{v_i} to each \eqn{v_j} in
\code{graph}, but the matrix that is returned will be the minimum value of
the \eqn{ij}th entry and the \eqn{ji}th entry, resulting in a symmetric
matrix. e.g.,
\deqn{D_{ij} = \min{\{\frac{1}{deg(v_i)}\sum_{v_k \in N(v_i)}^{} d(v_k, v_j),
\frac{1}{deg(v_i)}\sum_{v_k \in N(v_j)}^{} d(v_k, v_i)\}}}
}
\section{Functions}{
\itemize{
\item \code{get_d2_min}: 
}}
\examples{
## standard matrix representation
mean_neighbor_dist_min(karate)

## using precomputed shortest paths
sp <- all_shortest_paths_uwud_fast(dolphins)
mean_neighbor_dist_min(dolphins, short_paths = sp)
}
\keyword{graphs}

