% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Cluster.R
\name{cluster_redwalk}
\alias{cluster_redwalk}
\title{Berenhaut Community Detection on Networks}
\usage{
cluster_redwalk(graph, nodes = V(graph), short_paths = NULL)
}
\arguments{
\item{graph}{an igraph object.}

\item{nodes}{a subset of the nodes in the graph to cluster, defaults to all
nodes (full community detection)}

\item{short_paths}{either a \eqn{|V|x|V|} symmetric dissimilarity matrix of the
vertices in \code{graph} or a \code{\link{dist}} object from the
\pkg{\link{stats}} package. If \code{NULL} (default), the shortest paths will
be calculated. Note: much faster if \code{short_paths} is
provided and much faster if \code{diss} is of class "matrix" rather than
"dist".}
}
\value{
\code{cluster_redwalk} returns a \code{\link{hclust}} object from
the \pkg{\link{stats}} package.
}
\description{
Performs community detection on networks using average shortest path distance
of vertex neighbors as the set of dissimilarities for heirarcal clustering
with "average" as the agglomeration method. If shortest paths are supplied,
this function is ~50\% faster. It is also best to use a symmetric "matrix"
rather than a "dist" object if performance is critical. Time complexity is
O(n^2 log n) and space complexity is O(n^2). This function returns an
\code{\link{hclust}} object rather than an igraph \code{\link{communities}}
object because the algorithm does not attempt to use modularity use or
maximize modularity (although the resulting partitioning results in a maximum
modularity that is competitive with the top community detection algorithms).
}
\examples{
require(stats, quietly = TRUE)
cb <- cluster_redwalk(karate)
## cb is an hclust object
plot(cb)
## membership for different community sizes (k)
cutree(cb, k = 2)
cutree(cb, k = 3)

## using precomputed shortest paths
sp <- distances(dolphins, weights = NA)
cbd <- cluster_redwalk(dolphins, short_paths = sp)
plot(cbd)
cutree(cbd, k = 2)
cutree(cbd, k = 4)

}
\keyword{cluster}
\keyword{graphs}

